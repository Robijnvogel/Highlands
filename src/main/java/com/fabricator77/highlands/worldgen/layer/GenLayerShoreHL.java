package com.fabricator77.highlands.worldgen.layer;

//TODO: unused perhaps time to delete ?

import fabricator77.multiworld.api.biomeregistry.AdvancedBiomeRegistry;
import com.fabricator77.highlands.api.HighlandsBiomes;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;
import net.minecraftforge.common.BiomeManager.BiomeEntry;

public class GenLayerShoreHL extends GenLayer
{	
	private BiomeEntry[] hillsBiomes;
	private BiomeEntry[] islandBiomes;
	private BiomeEntry[] oceanBiomes;
	
    public GenLayerShoreHL(long par1, GenLayer par3GenLayer)
    {
        super(par1);
        this.parent = par3GenLayer;
        hillsBiomes = AdvancedBiomeRegistry.getBiomesOfType("hills");
        islandBiomes = AdvancedBiomeRegistry.getBiomesOfType("island");
        oceanBiomes = AdvancedBiomeRegistry.getBiomesOfType("ocean");
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int par1, int par2, int par3, int par4)
    {
        int[] aint = this.parent.getInts(par1 - 1, par2 - 1, par3 + 2, par4 + 2);
        int[] aint1 = IntCache.getIntCache(par3 * par4);

        for (int i1 = 0; i1 < par4; ++i1)
        {
            for (int j1 = 0; j1 < par3; ++j1)
            {
                this.initChunkSeed((long)(j1 + par1), (long)(i1 + par2));
                int k1 = aint[j1 + 1 + (i1 + 1) * (par3 + 2)];
                BiomeGenBase biomegenbase = BiomeGenBase.getBiome(k1);
                int l1;
                int i2;
                int j2;
                int k2;
                
                l1 = aint[j1 + 1 + (i1 + 1 - 1) * (par3 + 2)];
                i2 = aint[j1 + 1 + 1 + (i1 + 1) * (par3 + 2)];
                j2 = aint[j1 + 1 - 1 + (i1 + 1) * (par3 + 2)];
                k2 = aint[j1 + 1 + (i1 + 1 + 1) * (par3 + 2)];
                if (!isOceanAdjacent(l1, i2, j2, k2))
                {
                	if (AdvancedBiomeRegistry.biomeEntries[k1].beachBiome != -1) {
                		aint1[j1 + i1 * par3] = AdvancedBiomeRegistry.biomeEntries[k1].beachBiome;
                	}
                	else {
                		aint1[j1 + i1 * par3] = k1;
                	}
                }
                else {
                	aint1[j1 + i1 * par3] = k1;
                }
            }
        }

        return aint1;
    }

    private boolean isOceanAdjacent (int l1, int i2, int j2, int k2) {
    	for (int i=0; i<oceanBiomes.length; i++) {
    		int oceanID = oceanBiomes[i].biome.biomeID;
    		if (l1 == oceanID || i2 == oceanID || j2 == oceanID || k2 == oceanID) {
    			return true;
    		}
    	}
    	return false;
    }
    
    private boolean isOceanBiome (int biomeID ) {
    	for (int i=0; i<oceanBiomes.length; i++) {
    		if (oceanBiomes[i].biome.biomeID == biomeID) {
    			return true;
    		}
    	}
    	return false;
    }    
    
    private boolean isWateryBiome (int biomeID ) {
    	if (biomeID == BiomeGenBase.river.biomeID ||
    		biomeID == BiomeGenBase.swampland.biomeID ||
    		biomeID == HighlandsBiomes.estuary.biomeID ||
        	biomeID == HighlandsBiomes.lake.biomeID ||
        	biomeID == HighlandsBiomes.bog.biomeID ||
        	biomeID == HighlandsBiomes.lowlands.biomeID)
    	{
    		return true;
    	}
    	return false;
    }
    
    private boolean isHillsBiome (int biomeID ) {
    	for (int i=0; i<hillsBiomes.length; i++) {
    		if (hillsBiomes[i].biome.biomeID == biomeID) {
    			return true;
    		}
    	}
    	return false;
    }
    
    private boolean isIslandBiome (int biomeID ) {
    	for (int i=0; i<islandBiomes.length; i++) {
    		if (islandBiomes[i].biome.biomeID == biomeID) {
    			return true;
    		}
    	}
    	return false;
    }
}